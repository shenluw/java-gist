import java.util.regex.Pattern

/*
 * This file was generated by the Gradle 'init' task.
 */

task runEnum {
    println("run enum")


    def ft = project.fileTree(project.projectDir)

    def cp = ".*enum.*implements.*ValueEnum.*"

    def tp = "ValueEnum<(.*)>"
    def cnp = "enum(.*)implements"

    def mp = "public static void check(.*&s.*)\\{"

    def checkBlock = "\n" +
            "\tpublic static void check(&t value) {\n" +
            "\t\tEnums.check(&c.class, value);\n" +
            "\t}\n"

    def containsBlock = "\n" +
            "\tpublic static boolean contains(&t value) {\n" +
            "\t\treturn Enums.contains(&c.class, value);\n" +
            "\t}\n"


    def from1Block = "\n" +
            "\tpublic static &c from(&t value) {\n" +
            "\t\treturn Enums.from(&c.class, value);\n" +
            "\t}\n"

    def from2Block = "\n" +
            "\tpublic static &c from(Integer value, &c defaultValue) {\n" +
            "\t\t&c v = Enums.from(&c.class, value);\n" +
            "\t\treturn v == null ? defaultValue : v;\n" +
            "\t}\n"


    for (f in ft) {
        if (f.name.endsWith(".java")) {
            def t = f.getText("utf8")

            def m = Pattern.compile(cp).matcher(t)

            if (m.find()) {

                m = Pattern.compile(tp).matcher(t)

                if (m.find()) {
                    def type = m.group(1)

//                    m = Pattern.compile(mp.replace("&s", type)).matcher(t)
                    m = Pattern.compile(cnp).matcher(t)

                    m.find()
                    def cname = m.group(1).trim()

                    def addImport = !t.contains("import com.hzzh.common.enums.Enums;")
                    def addCheck = !t.contains("public static void check(&t value)".replaceAll("&t", type))
                    def addContains = !t.contains("public static boolean contains(&t value)".replaceAll("&t", type))
                    def addFrom1 = !t.contains("public static &c from(&t value)".replaceAll("&t", type).replaceAll("&c", cname))
                    def addFrom2 = !t.contains("public static &c from(Integer value, &c defaultValue)".replaceAll("&t", type).replaceAll("&c", cname))

                    def lines = f.readLines("utf8")

                    def out = ""

                    for (int i = 0; i < lines.size(); i++) {
                        if (i == 3 && addImport) {
                            out += "import com.hzzh.common.enums.Enums;\n"
                        }
                        if (i == lines.size() - 1) {
                            if (!t.contains("************************ auto gen ***********************")) {
                                out += "\n\t/************************ auto gen ***********************/\n"
                            }
                            if (addCheck) {
                                out += checkBlock.replaceAll("&t", type).replaceAll("&c", cname)
                            }
                            if (addContains) {
                                out += containsBlock.replaceAll("&t", type).replaceAll("&c", cname)
                            }
                            if (addFrom1) {
                                out += from1Block.replaceAll("&t", type).replaceAll("&c", cname)
                            }
                            if (addFrom2) {
                                out += from2Block.replaceAll("&t", type).replaceAll("&c", cname)
                            }
                        }

                        out += lines[i] + "\n"

                    }

                    println("up: " + cname)

                    f.write(out, "utf8")
                }
            }

        }
    }

}
